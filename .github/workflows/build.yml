name: Build ^_^

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      database:
        image: postgres:15.2-alpine3.17
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: intl, redis, pdo_pgsql, exif
          ini-values: >
            memory_limit=512M
          tools: composer
          coverage: none

      - name: Install dependencies
        working-directory: app
        run: composer install --prefer-dist --no-progress

      - name: Stop and remove any running containers
        run: |
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs -r docker rm      

      - name: Build and run Docker containers
        run: docker compose -f docker-compose.yml up -d --build
        env:
          MAILER_DSN: ${{ secrets.MAILER_DSN }}
          MAILER_FROM: ${{ secrets.MAILER_FROM }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          REDIS_DSN: ${{ secrets.REDIS_DSN }}

      - name: Run database migrations
        run: docker exec academy-php php bin/console doctrine:migrations:migrate --no-interaction

      - name: Wait for application to start
        run: |
          for i in {1..10}; do
            sleep 2;
          done

      - name: Check container status
        run: docker compose ps

      - name: Check application logs
        if: failure()
        run: docker compose logs

      - name: Check application health
        run: |
          curl -X POST http://localhost:8080/api/users/register -H "Content-Type: application/json" -d '{"email": "boltface@mail.ru"}' || exit 1